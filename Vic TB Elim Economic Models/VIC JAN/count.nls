;;*******************************************************************************************************************************
;;** Counting things, often with scale involved **
;;*******************************************************************************************************************************

to countDailyCases
  ;; Sets the day for reporting new cases at 6 (adjustable) days after testing+tracking.
  ;; (abstracted here as just tracking) this flows through to daily cases.
  let casestoday count simuls with [ color = red and tracked = 1 and caseReportTime = ticks ]
  set dailyCases casestoday * Scale_Factor ^ scalephase
end


to calculatePopulationScale
  ;; population scaling function
  set Scaled_Population ( count simuls ) * Scale_Factor ^ scalephase
end

to calculateScaledPopulation
  ;; calculates the scaled population for working with smaller environments
  set scaledPopulation Population * Scale_Factor ^ scalephase
end

to CalculateICUBedsRequired
  ;; calculates the number of ICU beds required at any time
  let needsICU count simuls with [ color = red and requireICU = 1 ]
  set ICUBedsRequired needsICU * Scale_Factor ^ scalephase
end

to calculateCurrentInfections
  ;; calculates the number of infected people in the population
  let infectedsimuls count simuls with [ color = red ]
    set currentInfections infectedsimuls * Scale_Factor ^ scalephase
end

to calculatePotentialContacts ;; counts the number of people tracked from infected people
  set PotentialContacts ( count links ) * Scale_Factor ^ scalephase
end


to countEWInfections
  ;; counts infections among Essential workers
  let EWInfects (count simuls with [ color = red and EssentialWorkerFlag = 1 ] )
  set EWInfections EWInfects * Scale_Factor ^ scalephase
end

to countSchoolInfections
  ;; counts infections among school students
  let studentInfects ( count simuls with [ color = red and StudentFlag = 1 ] )
  set studentInfections studentInfects * Scale_Factor ^ scalephase
end

to setCaseFatalityRate
  ;; calculates death rate per infected person over the course of the pandemic
  if Deathcount > 0 and numberinfected > 0 [
    set casefatalityrate ( Deathcount / numberInfected )
  ]
end


to calculateEliminationDate
  ;; records the day that no infected people remain in the environment
  if ticks > 1 and count simuls with [ color = red ] = 0 and eliminationDate = 0 [
    set eliminationDate ticks
  ]
end


to CalculateAverageContacts
  ;; calculates average contacts for simuls and average financial contacts, which are contacts with people who have positive 
  ;; cash reserves (?)
  if ticks > 0 [
    set AverageContacts mean [ contacts ] of simuls with [ color != black ]
  ]
end


to calculateScaledBedCapacity
  ;; scales the number of patches in the environment that represents Australian bed capacity
  set scaled_Bed_Capacity ( Hospital_Beds_In_Australia / 2500 )
end


to CalculateDailyGrowth
  ;; calculated the growth in infectes per day
  set YesterdayInfections TodayInfections

  ;; this considers ALL cases - not just the reported ones
  set TodayInfections ( count simuls with [ color = red and timenow = 1 ] )
  if YesterdayInfections != 0 [
    set InfectionChange ( TodayInfections / YesterdayInfections )
  ]
end

to CountInfected ;; global infection count
  set numberinfected cumulativeInfected
end

to calculateMeanDaysInfected
  if any? simuls with [ color = red ] [
    set meanDaysInfected ( mean [ timenow ] of simuls with [ color = red ] )
  ]
end

to countred
  ;; as per code
  set redCount count simuls with [ color = red ]
end

to countblue
  ;; as per code
  set blueCount count simuls with [ color = cyan ]
end

to countyellow
  ;; as per code
  set yellowcount count simuls with [ color = yellow ]
end

to calculateTodayInfected
  ;; calculates the number of people infected and recorded today for use in conjunction with yesterday's estimate for calculation of daily growth (see below)
  ;; this only considers reported cases - must adjust undetected cases if you want to report all infections
  set todayInfected dailycases
end

to calculateYesterdayInfected
  ;; calculates the number of people infected and recorded today
  set cumulativeInfected cumulativeInfected + todayInfected
end


to calculateMeanr
  ifelse any? simuls with [ color = red and timenow = int ownillnessperiod ]
  [
    set meanR ( mean [ R ] of simuls with [ color = red and timenow = int ownillnessperiod ])
  ]
  [
    ;; calculates mean Reff for the population
    set MeanR MeanR
  ]
end


to calculateCasesInLastPeriod
  ;; counts cases in the last 14 days -
  ;; THIS ONLY COUNTS DETECTED CASES, NOT ALL INFECTIONS - TO ADJUST YOU MUST SET ASYMPTOMATIC TO ZERO

  set prior27 prior26
  set prior26 prior25
  set prior25 prior24
  set prior24 prior23
  set prior23 prior22
  set prior22 prior21
  set prior21 prior20
  set prior20 prior19
  set prior19 prior18
  set prior18 prior17
  set prior17 prior16
  set prior16 prior15
  set prior15 prior14
  set prior14 prior13
  set prior13 prior12
  set prior12 prior11
  set prior11 prior10
  set prior10 prior9
  set prior9 prior8
  set prior8 prior7
  set prior7 prior6
  set prior6 prior5
  set prior5 prior4
  set prior4 prior3
  set prior3 prior2
  set prior2 prior1
  set prior1 prior0
  set prior0 dailyCases
  
  set casesinperiod14 (prior0 + prior1 + prior2 + prior3 + prior4 + prior5 + prior6 + prior7 + prior8 + prior9
    + prior10 + prior11 + prior12 + prior13 )

  set casesinperiod7 (prior0 + prior1 + prior2 + prior3 + prior4 + prior5 + prior6 )

  set casesinperiod28 (prior0 + prior1 + prior2 + prior3 + prior4 + prior5 + prior6 + prior7 + prior8 + prior9
    + prior10 + prior11 + prior12 + prior13 + prior14 + prior15 + prior16 + prior17 + prior18 + prior19
    + prior20 + prior21 + prior22 + prior23 + prior24 + prior25 + prior26 + prior27)

  set prior6_real prior5_real
  set prior5_real prior4_real
  set prior4_real prior3_real
  set prior3_real prior2_real
  set prior2_real prior1_real
  set prior1_real prior0_real
  set prior0_real new_case_real
  
  set casesinperiod7_real (prior0_real + prior1_real + prior2_real + prior3_real + prior4_real + prior5_real + prior6_real )
  
  ;print prior13
  ;print prior12
  ;print prior11
  ;print prior10
  ;print prior9
  ;print prior8
  ;print prior7
  ;print prior6
  ;print prior5
  ;print prior4
  ;print prior3
  ;print prior2
  ;print prior1
  ;print prior0
  ;print"****************************************************"
end

to calculateObjfunction
  ;; moderate
  if ticks > 1 and numberinfected != 0 [
    set objFunction ( log numberInfected 10 ) + 1 * (1 - ( mean [ contacts ] of simuls ) )
  ]
end


to CalculateMeanIDTime
  let IDTimeList [ IDTime ] of simuls with [ color != cyan ]
  ifelse not empty? IDTimeList
  [
    set meanIDTime mean IDTimeList
  ]
  [
    set meanIDTime 0
  ]
end
