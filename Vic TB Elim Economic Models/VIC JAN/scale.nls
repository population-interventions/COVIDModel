
;;*******************************************************************************************************************************
;;** Scale Modification **
;;*******************************************************************************************************************************

to scaleup
  set scalephase scalephase + 1
  ask n-of ( count simuls with [ color = red ] * (1 - 1 / Scale_Factor) ) simuls with [ color = red ] [
    set size 2
    set color cyan
    set timenow 0
    set inQuarantine 0
    set sensitivity random-float 1
    set imported 0
    set R 0

    move-to one-of patches with [ pcolor = black ]
    simul_resetlanding
    set riskofdeath .01
    set ageRange ([ageRange ] of one-of simuls)

    simul_resetSomeRandomParams

    set returntoschool random 100
  ]

  ask n-of ( count simuls with [ color = yellow ] * (1 - 1 / Scale_Factor) ) simuls with [ color = yellow ] [
    set size 2
    set color cyan

    set ageRange ([ageRange ] of one-of simuls)
    set imported 0 ;; resethealth

    set timenow 0
    set inQuarantine 0
    set sensitivity random-float 1
    set R 0

    move-to one-of patches with [ pcolor = black ] ;; resetincome calculateincomeperday calculateexpenditureperday
    simul_resetlanding
    set riskofdeath [ riskOfDeath ] of one-of simuls with [ agerange = ([ agerange ] of myself )]

    simul_resetSomeRandomParams
  ]

  set contact_Radius Contact_Radius + (90 / 4)
end

to scaledown_no_hatch
  ask simuls with [ color = red ] [
    let my_timenow timenow
    let my_caseReportTime caseReportTime
    let my_tracked tracked
    let my_inQuarantine inQuarantine

    ask n-of (Scale_Factor - 1) simuls with [ color != red or color != black ] [
      set color red
      set timenow my_timenow
      set caseReportTime my_caseReportTime
      set tracked my_tracked
      set inQuarantine my_inQuarantine
      if inQuarantine = 1 [
        move-to one-of patches with [ pcolor = white ] 
      ]
    ]
  ]
  
  set contact_Radius Contact_radius - (90 / 4)
  set scalephase scalephase - 1
end
  
to scaledown
  ;; reverses the procedure above after the peak of the epidemic
  ask simuls with [ color = red ] [
    hatch (Scale_Factor - 1) [
      ;; Doesn't this give them all the same household???
      move-to one-of patches with [ pcolor = black ]
      
      ;; Re-randomise some things
      simul_resetSomeRandomParams
    ]
  ]

  set contact_Radius Contact_radius - (90 / 4)
  set scalephase scalephase - 1
  
  scaledownhatch
end

to scaledownhatch
  ;; removes excess simuls fromt the scaled-down view
  let vaccineRemovals 0
  let vaccineWait []
  let vaccineEff []
  if count simuls > Population [
    ask n-of ( count simuls - Population ) simuls with [ color != red or color != black ] [
      if vaccinated = 1 or vacWaitDays > 0 [
        set vaccineWait lput vacWaitDays vaccineWait
        set vaccineEff lput vacWaitDays vaccineEff
        set vaccineRemovals vaccineRemovals + 1
      ]
      die
    ]
  ]
  
  let eligibleSimul simuls with [ color = cyan and vacWaitDays = 0 and vaccinated = 0 ]
  if count eligibleSimul < vaccineRemovals [
   set vaccineRemovals count eligibleSimul
  ]
  
  let index 0
  ask n-of vaccineRemovals eligibleSimul [
    set vacWaitDays item index vaccineWait
    set selfVaccEffectiveness item index vaccineWait
    if vacWaitDays = 0 [
      set shape "person"
      set vaccinated 1
      
      ;; Reduce illness length
      set ownincubationperiod ( ownincubationperiod * (1 - selfVaccEffectiveness) )
      set ownillnessperiod (ownillnessperiod * (1 - selfVaccEffectiveness) )
    ]
    
    set index index + 1
  ]
end

to CheckScale
  ;; this function scales up the simulation at base Scale_Factor to enable a small and large-scale understanding of dynamics.
  ;; It enables the fine-grained analysis in early stages that more closely resembles diffusion across a population similar to
  ;; assumptions in SEIR models but as it scales up, recognises that there are geographic constraints of movement of populations
  (ifelse scale = true and ( count simuls with [ color = red ] ) >= Scale_Threshold and scalePhase >= 0 and ((Scale_Factor ^ (scalePhase + 1)) * Population <= Total_Population) and days > 0
    [
      scaleup
    ]
    scale = true and count simuls with [ color = red ] <= Scale_Threshold / Scale_Factor and yellowcount > redcount and days > 0 and scalephase > 0
    [
      scaledown_no_hatch
    ]
  )
end
