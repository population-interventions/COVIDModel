;;
;; Simulants and functions particular to simulants that don't have anywhere else to live.
;;

breed [ simuls simul ]

simuls-own [
  health ;; baseline health of the individual
  inQuarantine ;; whether the person is in ICU or not
  sensitivity ;; person's sensitivity to news about the pandemic
  R ;; the estimated RNaught of individuals
  contacts ;; the number of contacts the person has made in the model
  IncubationPd ;; the incubation perios of the illness ascribed to the person
  DailyRisk ;; the risk of death of the person per day based on their agerange
  RiskofDeath ;; the overall risk of deth for the person if they contract the illness based on their age
  Pace ;; the speed that pthe person moves around the environment

  ownIllnessPeriod ;; unique illness period associated with the individual
  ownIncubationPeriod ;; unique incubation pd for the person - related to IncubationPd so can probably be cleaned up - IncubationPd is a legacy var as previously all incubation periods were identical
  ownComplianceWithIsolation ;; unique variable associated with compliance to Isocation of cases if infected
  personalVirulence ;; the infectivity of the person

  timenow ;; the number of days since initial infection
  caseReportTime ;; Day on which the case will be reported
  
  tracked ;; whether the person has been tracked by the health system
  asymptomaticFlag ;; indicator identifying Asymptomatic cases
  asymptomatic_draw ;; Determines whether the agent will be asymptomatic
  
  proportion_people_avoid_draw ;; Determines whether this agent heeds avoiding at various lockdown stages

  RequireICU ;; Whether the agent requires ICU at the moment
  requireICU_draw ;; Random determiner [0, 1) of whether the agent requires ICU

  EssentialWorkerPriority ;; Value from 0 - 100 that sets priority of the job. 1 is high, 100 is low.
  EssentialWorkerFlag ;; indicator of whether the person is considered to be an essential worker under the current lockdown policy.
  
  agerange ;; the age of the person
  atsi
  comorbidityState ;; does the person have a comorbidity
  essentialJob ;; Static indicator of whether the agent's job is most essential, which gives it higher EssentialWorkerPriority (ie closer to zero).
  isWorker
  
  VaccPhase ;; phase at which this person would receive vaccine
  VaccSubPhase ;; subphase at which this person would receive vaccine (1a, 1b etc)
  sm_vac_uptake ;; Likelyhood of taking a vaccine if offered
  
  vaccinated ;; is the person vaccinated?
  vaccineOffered ;; Has the vaccine been offered?
  vacWaitDays ;; Timer for the delay in vaccine coming into effect.
  selfVaccEffectiveness ;; Effectiveness of the vaccine I recieved

  wearsMask ;; for use in determining if the person wears a face mask
  wearingMask ;; identifies if the person is wearing a mask or not
  ownMaskEfficacy ;; the efficacy of the person's own mask

  householdUnit ;; the id of the household the person belongs to
  studentFlag ;; identifies if the person is a student or not
  currentVirulence ;; current virulence of the person on the day of their infection
  Imported ;; identifies imported cases
  adultsInHousehold ;; counts how many adults in a household for peole under 70
  homeLocation ;; this is where these people live
  returntoschool ;; a random number between 0 and 100 that determines whether the person will return to school (assuming they are a student) at time x

  isolateCompliant ;; Is the person currently isolating this tick (because they are succeptible and isolating, or infected and tracked)
  isolating ;; is a succeptible person supposed to be isolating?
  IDTime ;; days into infection the person is identified as a case

  contacts7 ;; contacts from seven days ago
  contacts6
  contacts5
  contacts4
  contacts3
  contacts2
  contacts1 ;; contacts from today
  
  ;; Unused
  ;anxiety ;; person's level of anxiety aboutt he pandemic
]

;;*******************************************************************************************************************************
;;** Simul Utility Functions **
;;*******************************************************************************************************************************

to simul_updatepersonalvirulence
  ;; creates a triangular distribution of virulence that peaks at the end of the incubation period
  if color = red [
    ;print "simul_updatepersonalvirulence"
    ;print who
    ;print days
    ;print personalVirulence
    ;print timenow
    ;print ownIncubationPeriod
    ;print ownIllnessPeriod
    if timenow <= ownIncubationPeriod [
      set currentVirulence ( personalVirulence * ( timenow / ownIncubationPeriod ))
    ]
    if timenow > ownIncubationPeriod [
      set currentVirulence ( personalVirulence * ( ( ownIllnessPeriod - timenow ) / ( ownIllnessPeriod - ownIncubationPeriod )))
    ]
    ;print currentVirulence
    ;set currentVirulence 0
  ]
end

to simul_resetlanding
  ;; now working so home locations are not in green space
  ifelse table:has-key? houseLocationTable householdUnit 
  [
    set homeLocation table:get houseLocationTable householdUnit
  ]
  [
    move-to one-of patches with [ pcolor = black and houseIndex = -1 ]
    let houseNumber householdUnit
    ask patch-here [
      set houseIndex houseNumber
    ]
    set homeLocation patch-here
    table:put houseLocationTable householdUnit patch-here
  ]
  
  ifelse 50 > random 100 
  [
    move-to one-of patches with [ pcolor = black ]
  ]
  [
     move-to homeLocation
  ]
  ;; iterates / sorts people into households
end

to simul_PossiblyDie
  ;; determines whether people die on the basis of poor health (not currently active)
  if inQuarantine = 0 and Severity_of_illness / Illness_Period > random 100 [
    set health health - Severity_of_Illness
  ]
  if inQuarantine = 1 and Severity_of_illness / Illness_Period > random 100 [
    set health health - Severity_of_Illness / Treatment_Benefit
  ]
end

to simul_avoidICUs
  ;; makes sure that simulswho have not been sent to hospital stay outside
  if [ pcolor ] of patch-here = white and inQuarantine = 0 [
    move-to min-one-of patches with [ pcolor = black ] [ distance myself ]
  ]
end

to simul_move_to_empty_patch
  let movePatch one-of neighbors with [ lastUtilTime < ticks ]
  if is-patch? movePatch [
    move-to movePatch
    ask movePatch [
      set lastUtilTime ticks
    ]
  ]
end

to simul_resetSomeRandomParams
  set ownIllnessPeriod ( exp random-normal M S ) ;; log transform of illness period
  set ownIncubationPeriod ( exp random-normal Minc Sinc ) ;;; log transform of incubation period
  
  rngs:init ;; replacing previous log transform with beta distribution
  let stream_id random-float 999
  let seed random-float 999
  rngs:set-seed stream_id seed
  let complianceDist rngs:rnd-beta stream_id 450.3 23.7
  set ownComplianceWithIsolation complianceDist
  
  set proportion_people_avoid_draw random 100

  let maskWearEfficacy rngs:rnd-beta stream_id 24.3 8.08
  ;; assigning mask efficacy to individuals around a distribution with median 75% or 75% x 1/3 if 33 as per request based on Burnett Institute #s
  set ownMaskEfficacy maskWearEfficacy 
end

to simul_updateIsolationResponse
  set pace span
  set isolateCompliant 0
  if ((Case_Isolation and isolating = 1) or (tracked = 1)) [
    if ownCompliancewithIsolation < random-float 1 [
      move-to homelocation
      set pace 0
      set isolateCompliant 1
    ]
  ]
end

;;*******************************************************************************************************************************
;;** Simul Once-A-Tick Functions **
;;*******************************************************************************************************************************

to simul_record_patch_infectiveness
  if color = red and currentVirulence > 0 [
    let localInfectiveness currentVirulence
    if wearingMask = 1 [
      set localInfectiveness (localInfectiveness * (1 - ownMaskEfficacy)) * Mask_Efficacy_Mult
    ]
    if asymptomaticFlag = 1 [
      set localInfectiveness (localInfectiveness * Asymptomatic_Trans)
    ]
    if vaccinated = 1 [
      set localInfectiveness (localInfectiveness * (1 - selfVaccEffectiveness))
    ]
    
    ;print "currentVirulence"
    ;print currentVirulence
    ;print ownMaskEfficacy
    ;print Asymptomatic_Trans
    ;print localInfectiveness
    
    let myPatch patch-here
    ask myPatch [
      if lastInfectionUpdate < ticks [
        set infectionList []
        set lastInfectionUpdate ticks
      ]
      set infectionList lput localInfectiveness infectionList
    ]
  ]
end

to simul_update_patch_utilisation
  let myPatch patch-here
  ask myPatch [
    set lastUtilTime ticks
  ]
end

to simul_update_patch_house_gather
  let myPatch patch-here
  let houseNumber householdUnit
  ask myPatch [
    ifelse lastHouseGatherTime < ticks
    [
      set houseGatherIndex houseNumber
      set lastHouseGatherTime ticks
    ]
    [
      ;; Check if another household is here.
      if houseGatherIndex != houseNumber [
        set houseGatherIndex -1
      ]
    ]
  ]
end

to simul_infect
  if color = cyan [
    let mySucceptibility 1
    if wearingMask = 1 [
      set mySucceptibility (mySucceptibility * (1 - ownMaskEfficacy)) * Mask_Efficacy_Mult
    ]
    if vaccinated = 1 [
      set mySucceptibility (mySucceptibility * (1 - selfVaccEffectiveness))
    ]
    let myPatch patch-here
    let localInfectionList 0
    ask myPatch [
      if lastInfectionUpdate >= ticks [
        set localInfectionList infectionList
      ]
    ]
    
    if is-list? localInfectionList [
      foreach infectionList [ x ->
        ;print "x"
        ;print x
        if color = cyan [
          set transmission_count transmission_count + 1
          set transmission_sum transmission_sum + mySucceptibility * x
          
          if mySucceptibility * x > random-float 1 [
            set color red
            set timenow 0
            set new_case_real_counter new_case_real_counter + Scale_Factor ^ scalephase
          ]
        ]
      ]
    ]
  ]
end

to simul_move
  ;; describes the circumstances under which people can move and infect one another
  if ticks > 1 and inQuarantine = 0 and isolateCompliant = 0 [
    ;; this is assigned per agent so day and night are not aligned across people - this is deliberate
    let randombinary random 2

    ifelse randombinary = 1
    [
      if (color != red or color != black) and spatial_Distance = false [
        ;; contact radius defines how large the circle of contacts for the person is.
        set heading heading + Contact_Radius + random 45 - random 45
        forward random pace
        simul_avoidICUs
      ]

      ;; non-compliant people continue to move around the environment unless they are very sick
      if color = red and health > random 100 [
        set heading heading + random 90 - random 90
        forward random pace
      ]

      ;; steers people away from the hospital
      if color = red and Quarantine = false [
        simul_avoidICUs
      ]

      ;; hides deceased simuls from remaining simuls, preventing interaction
      if color = black [
        move-to one-of MedResources
        ;; this considers how mobile people are
      ]
    ]
    [
      move-to homeLocation
    ]
  ]
end

to simul_avoid_student
  ;; Makes students avoid some people but not others if schoolsPolicy = true.
  ;; same thing but specifically targets the movement of students if the schools policy is turned on - that is
  ;; if students are expected to return to school
  ;; schoolspolicy = true means 'go to school = true
  ifelse Spatial_Distance = true and AgeRange > Age_Isolation
      and Proportion_People_Avoid > proportion_people_avoid_draw
      and Proportion_Time_Avoid > random 100
  [
    let myPatch patch-here
    let possiblyNeedAvoid false
    ask myPatch [
      if lastHouseGatherTime = ticks and houseGatherIndex = -1 [
        set possiblyNeedAvoid true
      ]
    ]
    if possiblyNeedAvoid and any? other simuls-here with [ householdUnit != [ householdUnit ] of myself and studentFlag != 1 ] [
      ;; students don't isolate from each other or their household unit
      simul_move_to_empty_patch
    ]
  ]
  ;; if you are a student, you avoid everyone you can except for essential workers (i.e., teachers), other students
  ;; and people from your own household
  [
    ;; TODO. The following line is responsible for 30% of the compute time.
    move-to one-of simuls with [ essentialworkerflag = 1 or householdUnit = [ householdUnit ] of myself or studentFlag = 1 ]
    simul_update_patch_house_gather
    simul_update_patch_utilisation
  ]
end

to simul_avoid
  ;; so, if the social distancing policies are on and you are distancing at this time and you are not part of an age-isolated
  ;; group and you are not an EssentialWorkerPriority, then if there is anyone near you, move away if you can.
  ;; Isolating people still avoid anyone who wanders into their home? No.
  if inQuarantine = 0 and isolateCompliant = 0 [
    ;; if you are an essential worker, you can only reduce your
    ;; contacts when you are not at work assuming 8 hours work, 8 hours rest, 8 hours recreation - rest doesn't count for anyone, hence it is
    ;; set at 50 on the input slider. People don't isolate from others in their household unit
    (ifelse (EssentialWorkerFlag = 1 or Ess_W_Risk_Reduction > random 100)
      and Spatial_Distance = true and AgeRange > Age_Isolation
      and Proportion_People_Avoid > proportion_people_avoid_draw
      and Proportion_Time_Avoid > random 100
      [
        let myPatch patch-here
        let possiblyNeedAvoid false
        ask myPatch [
          if lastHouseGatherTime = ticks and houseGatherIndex = -1 [
            set possiblyNeedAvoid true
          ]
        ]
        if possiblyNeedAvoid and any? other simuls-here with [ householdUnit != [ householdUnit ] of myself ] [
          simul_move_to_empty_patch
        ]
      ]
      [
        ;; otherwise just avoid ICU (we already moved)
        simul_avoidICUs
        simul_update_patch_utilisation
    ])
    
    if studentFlag = 1 and global_schoolActive = 1 [
      simul_avoid_student
    ]
  ]
  move-to patch-here
end

to simul_superSpread
  if inQuarantine = 0 and isolateCompliant = 0 and superspreaders > random-float 1 [
    forward world-width / 2
    move-to patch-here
    simul_avoidICUs
  ]
end

to simul_recover
  ;; if you are not dead at the end of your illness period, then you become recovered and turn yellow and 
  ;; don't need hospital resources, anymore
  if timenow > ownillnessperiod and color != black [
    set color yellow
    set inQuarantine 0
    set isolating 0
    set timenow 0
    set tracked 0
    set health (100 - agerange )
    set requireICU 0
  ]
end

to simul_settime
  ;; asks simuls to start counting the days since they became infected and to also possibly die
  ;; dying this way currently not implemented but done at the end of the illness period, instead
  if color = red [
    set timenow timenow + 1
    simul_PossiblyDie
  ]
end

to simul_death
  ;; calculates death for individuals and adds them to a total for the population - This should not be relied upon to
  ;; esitmate deaths as it currently interacts with asymptomatic cases and undetected cases in the most recent version
  if color = red and timenow = int ownIllnessPeriod - 1 and RiskofDeath > random-float 1 [
    set color black
    set pace 0
    set RequireICU 0
    set inQuarantine 0
    set isolating 0
    set timenow 0
    set tracked 0
    set deathcount deathcount + Scale_Factor ^ scalephase
  ]
end

to simul_recovered_lose_immunity
  ;; if you are recovered but suceptible again, you could become reinfected
  if color = yellow and ReinfectionRate > random 100 [
    set color cyan
  ]
end

to simul_checkICU
  ;; estimates if someone needs and ICU bed
  if color = red and RequireICU_draw < ICU_Required and timenow >= ownIncubationPeriod [
    if tracked = 0 or caseReportTime > ticks[
      set caseReportTime ticks ;; Report instantly.
    ]
    set tracked 1 ;; Lets say that someone becomes tracked when they go to ICU
    set requireICU 1
    ;; By setting them to tracked they will end up in quarantine
  ]
end

to simul_EssentialWorkerID
  ;; identifies essential workers
  ifelse EssentialWorkerPriority < Essential_Workers
  [
    set EssentialWorkerFlag 1
  ]
  [
    set EssentialWorkerFlag 0
  ]
end

to simul_checkMask
  ;; identifies people who waear a mask
  if maskPolicy = true [
    ifelse wearsMask <= mask_Wearing and patch-here != homelocation
    [
      set wearingMask 1
    ]
    [
      set wearingMask 0
    ]
  ]
end

to simul_visitDestination
  ;; sets up destinations where people might gather and set off superspreader events
  ;; reduces large gatherings by stage
  if inQuarantine = 0 and isolateCompliant = 0 and random-float 1 < Visit_Frequency [
    let movePatch one-of destination_patches in-radius Visit_Radius
    if is-patch? movePatch [
      move-to movePatch
    ]
  ]
  ;; essential workers do not have the same capacity to reduce contact as non-esssential
end

to simul_updateHouseTrackedCase
  if color = red and tracked = 1 [
    table:put houseTrackedCaseTimeTable householdunit ticks
  ]
end

to simul_isolateAndTrackFromHouseHold
  ;; this identifies people in the system earlier because they get a test straight away having been a close contact of someone in their house
  if isolating = 1 and color = red [
    if tracked = 0 [
      set caseReportTime ticks + Case_Reporting_Delay
    ]
    set tracked 1
  ]
  
  if color = cyan or (color = red and tracked = 0) [
    ifelse table:get houseTrackedCaseTimeTable householdunit = ticks
    [
      if color = cyan [
        set isolating 1
      ]
      if color = red [
        if tracked = 0 [
          set caseReportTime ticks + Case_Reporting_Delay
        ]
        set tracked 1
      ]
    ]
    [
      set isolating 0
    ]
  ]
end
