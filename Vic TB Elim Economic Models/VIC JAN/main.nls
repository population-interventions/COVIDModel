
to SendToQuarantine
  ;; send people to quarantine if they have been identified
  if Quarantine = true [
    let freeSpots Quarantine_Spaces - (count simuls with [ inQuarantine = 1 ]) * Scale_Factor ^ scalephase
    if freeSpots > 0 [
      ;; Moves simuls to quarantine if they are known to be sick (checked by caseReportTime <= ticks)
      ;; Previously they would isolate, which has interactions with household and imperfect compliance, while quarantine is perfect.
      let rawFreeSpots int freeSpots / (Scale_Factor ^ scalephase)
      let eligible simuls with [ color = red and inQuarantine = 0 and tracked = 1 and caseReportTime <= ticks ]
      if count eligible < rawFreeSpots [
       set rawFreeSpots count eligible 
      ]
      ask n-of rawFreeSpots eligible [
        set inQuarantine 1
        move-to one-of patches with [ pcolor = white ]
      ]
    ]
  ]
end

;;;;;;;;;;;;*********END OF TTI FUNCTIONS******* ;;;;;;;;;;;;;

to-report nonesspercentage
  if count simuls with [ essentialworkerflag != 1 and color != cyan ] > 0 [
    report (count simuls with [ essentialworkerflag != 1 and color != cyan] ) / (count simuls with [ essentialWorkerFlag != 1 ])
  ]
end


to incursion
  ;; randomly asks someone to become infected
  if ticks > 0 and currentinfections = 0 and IncursionRate > random-float 100 [
    ask one-of simuls with [ color = cyan ] [
      set color red
    ]
  ]
end

to resetMetricAverages
  ifelse transmission_count > 0
  [
    set transmission_average transmission_sum / transmission_count
  ]
  [
    set transmission_average 0
  ]
  set transmission_count_metric transmission_count * Scale_Factor ^ scalephase
  set transmission_count 0
  set transmission_sum 0
  
  set new_case_real new_case_real_counter
  set new_case_real_counter 0
  
  ;print "moveCount"
  ;print moveCount
  ;print foundUseCount
  ;set moveCount 0
  ;set foundUseCount 0
end


;;*******************************************************************************************************************************
;;** Buttons **
;;*******************************************************************************************************************************
;; these funtions get called each time-step

to go
  ;; Check whether to scale up, which occurs when 10% of the agents are infected.
  CheckScale
  
  ;; Set a list of policy parameters (span (speed), tracking, mask_wearning etc..) based on current stage and stage reset timers
  setupstages
  
  ;; Update vaccine stage and parameters related to vaccines.
  vaccine_update
  
  ;;reset-timer
  
  ;; All the simulants independently either move outside or back to home
  ask simuls [
    ;; Untracked people have their speed set to the current recommended speed, based on policy.
    simul_updateIsolationResponse
    ;; Move around, or not. It's random.
    simul_move
    ;; Some people who are near a destination to move to that destination.
    simul_visitDestination
  ]
  
  ;; Patches update the flag that sets whether they have a simulant on them.
  ask simuls [
    simul_update_patch_utilisation
  ]
  
  ;; Simulants avoid people if social distancing is enabled, and they are not essential workers (or have some other reason to be in a crowd)
  ;; Note that simulants can effect each other in this stage.
  ask simuls [
    simul_avoid
  ]
  
  ask simuls [
    simul_superSpread
  ]
  
  ;; Simulants update how effective they are at spreading or receiving the virus, then add their infectiveness to the patch infectiveness
  ;; list (if they are infective).
  ask simuls [
    ;; creates a triangular distribution of virulence that peaks at the end of the incubation period
    simul_updatepersonalvirulence
    ;; Set a proprtion of people to wear masks when not home  (uses mask_Wearing (0-100) policy param)
    simul_checkMask
    ;; Tell the patch I am on whether I am infected
    simul_record_patch_infectiveness
  ]
  
  ;; Succeptible simulants look at the patch infectiveness list and possibly become infected by each entry they find.
  ask simuls [
    ;; Potentially catch the infection from patch infectiveness
    simul_infect
  ]
  
  ;; Send people to quarantine if they have been identified and there is space.
  SendToQuarantine
  
  ;; Simulants isolate based on household cases.
  ask simuls [
    simul_updateHouseTrackedCase
  ]
  ask simuls [
    ;; If I am succeptible and a household member is tracked, move home and set pace to 0, set isolated=1. Also track isolated=1 infected people.
    simul_isolateAndTrackFromHouseHold
  ]
  
  ;; Simulants do a bunch of non-interactive housekeeping.
  ask simuls [
    ;; if you are not dead at the end of your illness period, then you become recovered and turn yellow. Don't need hospital resources anymore.
    simul_recover
    ;; Increment illness time and possibly lose 'health' due to it. It is unclear what health is for.
    simul_settime
    ;; Possibly die if infected.
    simul_death
    
    ;; Recovered people can randomly become succeptible again.
    simul_recovered_lose_immunity

    ;; Set infected people to always require ICU after their incubation period???
    simul_checkICU
    ;; Randomly start tracking infected people based on track_and_trace_efficiency.
    simul_traceme
    ;; Set EssentialWorkerFlag based on proportion of population that is an essential worker (uses Essential_Workers (0-100) policy param)
    simul_EssentialWorkerID
    
    ;; Randomly vaccinate people according to uptake and stage.
    simul_vaccinate_me
  ]
  
  ;; Randomly turn suceptible agents into infected ones. Percentage chance = IncursionRate.
  incursion
  
  ;;show ( word " Simul Stuff " timer " seconds ")
  ;;reset-timer
  
  ;; Cache number of infected (red) suceptible (blue (actually cyan)) and recovered (yellow) agents
  set redCount count simuls with [ color = red ]
  set blueCount count simuls with [ color = cyan ]
  set yellowcount count simuls with [ color = yellow ]

  if proportion_people_avoid > Complacency_Bound [
    set proportion_people_avoid proportion_people_avoid - 1
  ]
  if proportion_time_avoid > Complacency_Bound [
    set proportion_time_avoid proportion_time_avoid - 1
  ]

  set numberinfected cumulativeInfected
  set YesterdayInfections TodayInfections

  ;; this considers ALL cases - not just the reported ones
  set TodayInfections ( count simuls with [ color = red and timenow = 1 ] )
  if YesterdayInfections != 0 [
    set InfectionChange ( TodayInfections / YesterdayInfections )
  ]
  ;; calculates death rate per infected person over the course of the pandemic
  if Deathcount > 0 and numberinfected > 0 [
    set casefatalityrate ( Deathcount / numberInfected )
  ]
  ;; Sets the day for reporting new cases at 6 (adjustable) days after testing+tracking.
  ;; (abstracted here as just tracking) this flows through to daily cases.
  let casestoday count simuls with [ color = red and tracked = 1 and caseReportTime = ticks ]
  set dailyCases casestoday * Scale_Factor ^ scalephase
  
  ;; population scaling function
  set Scaled_Population ( count simuls ) * Scale_Factor ^ scalephase

  let needsICU count simuls with [ color = red and requireICU = 1 ]
  set ICUBedsRequired needsICU * Scale_Factor ^ scalephase
 
  ;; scales the number of patches in the environment that represents Australian bed capacity
  set scaled_Bed_Capacity ( Hospital_Beds_In_Australia / 2500 )
  
  ;; calculates the number of infected people in the population
  set currentInfections redcount * Scale_Factor ^ scalephase

  ;; calculates the number of people infected and recorded today
  set cumulativeInfected cumulativeInfected + todayInfected
  
  ;; calculates the number of people infected and recorded today for use in conjunction with yesterday's estimate for calculation of daily growth (see below)
  ;; this only considers reported cases - must adjust undetected cases if you want to report all infections
  set todayInfected dailycases
  
  ;; calculates the scaled population for working with smaller environments
  set scaledPopulation Population * Scale_Factor ^ scalephase
  
  ;; Set casesinperiod7, which is only detected cases. Also sets casesinperiod14 and casesinperiod28.
  
  calculateCasesInLastPeriod
  calculateCasesInLastPeriod_2
  
  ;; set track_and_trace_efficiency based on the number of recent cases.
  traceadjust
  ;; Set lockdown stage and easing date, bases mostly on casesinperiod7
  CovidPolicyTriggers

  ;; Zero count- and average-style metrics for gaterhing throughout the next step
  resetMetricAverages
  
  ;;show ( word " calculate Stuff " timer " seconds ")
  
  ;; counts days per tick, likely redundant at present as days are not used for anything right now.
  set days days + 1
  
  tick
end